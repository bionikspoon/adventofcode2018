import { compute } from './compute'

describe.each`
  instructions         | before          | after
  ${['addr', 2, 1, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 8, 1]}
  ${['addi', 2, 1, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 4, 1]}
  ${['mulr', 2, 1, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 15, 1]}
  ${['muli', 2, 4, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 12, 1]}
  ${['banr', 2, 3, 3]} | ${[7, 5, 0, 1]} | ${[7, 5, 0, 0]}
  ${['banr', 2, 3, 3]} | ${[7, 5, 1, 0]} | ${[7, 5, 1, 0]}
  ${['banr', 2, 3, 3]} | ${[7, 5, 3, 1]} | ${[7, 5, 3, 1]}
  ${['banr', 0, 1, 3]} | ${[7, 5, 3, 1]} | ${[7, 5, 3, 5]}
  ${['bani', 3, 1, 3]} | ${[7, 5, 3, 1]} | ${[7, 5, 3, 1]}
  ${['bani', 3, 0, 3]} | ${[7, 5, 3, 1]} | ${[7, 5, 3, 0]}
  ${['borr', 2, 3, 3]} | ${[7, 5, 0, 1]} | ${[7, 5, 0, 1]}
  ${['borr', 2, 3, 3]} | ${[7, 5, 1, 0]} | ${[7, 5, 1, 1]}
  ${['borr', 2, 3, 3]} | ${[7, 5, 0, 0]} | ${[7, 5, 0, 0]}
  ${['borr', 2, 3, 3]} | ${[7, 5, 1, 1]} | ${[7, 5, 1, 1]}
  ${['borr', 2, 3, 3]} | ${[7, 5, 3, 1]} | ${[7, 5, 3, 3]}
  ${['bori', 3, 1, 1]} | ${[7, 5, 3, 0]} | ${[7, 1, 3, 0]}
  ${['bori', 3, 0, 1]} | ${[7, 5, 3, 0]} | ${[7, 0, 3, 0]}
  ${['setr', 0, 1, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 7, 1]}
  ${['setr', 0, 1, 0]} | ${[7, 5, 3, 1]} | ${[7, 5, 3, 1]}
  ${['seti', 2, 1, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 2, 1]}
  ${['gtir', 2, 3, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 1, 1]}
  ${['gtir', 2, 2, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 0, 1]}
  ${['gtri', 2, 4, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 0, 1]}
  ${['gtri', 2, 1, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 1, 1]}
  ${['gtrr', 2, 3, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 1, 1]}
  ${['gtrr', 3, 2, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 0, 1]}
  ${['eqir', 3, 2, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 1, 1]}
  ${['eqir', 3, 3, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 0, 1]}
  ${['eqri', 0, 7, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 1, 1]}
  ${['eqri', 1, 4, 2]} | ${[7, 5, 3, 1]} | ${[7, 5, 0, 1]}
  ${['eqrr', 0, 0, 0]} | ${[7, 5, 3, 1]} | ${[1, 5, 3, 1]}
  ${['eqrr', 0, 1, 0]} | ${[7, 5, 3, 1]} | ${[0, 5, 3, 1]}
`('given op $instructions.0', ({ instructions, before, after }) => {
  const args = instructions.slice(1)
  test(`with args ${args} on registry ${before} it can compute`, () => {
    expect(compute(instructions, before)).toEqual(after)
  })
})
